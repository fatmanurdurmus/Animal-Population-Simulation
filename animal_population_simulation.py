# -*- coding: utf-8 -*-
"""animal_population_simulation.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jwv6R3JMvEz1cE0fdnpAQl59_l4XyWZT
"""

import numpy as np
from scipy.spatial import cKDTree
import random


ALAN_BOYUTU = 500
ADIM_SAYISI = 1000
UREME_MESAFESI = 3
KURT_AV_MESAFESI = 4
ASLAN_AV_MESAFESI = 5
AVCI_AV_MESAFESI = 8

# Kim kimi avlayabilir?
AV_HEDEFLERI = {
    'kurt': ['koyun', 'tavuk', 'horoz'],
    'aslan': ['inek', 'koyun'],
    'avci': ['koyun', 'inek', 'tavuk', 'kurt', 'horoz', 'aslan']
}

class Hayvan:
    def __init__(self, tur, cinsiyet=None):
        self.tur = tur  # Hayvan türü
        self.cinsiyet = cinsiyet  # 'E' = Erkek, 'D' = Dişi, None = Cinsiyetsiz
        # Rasgele konumlandırma (x, y)
        self.konum = np.array([random.uniform(0, ALAN_BOYUTU), random.uniform(0, ALAN_BOYUTU)])

    def hareket_et(self):
        # -1 ile 1 arasında rastgele bir vektörle hareket etme
        hareket = np.random.uniform(-1, 1, size=2)
        yeni_konum = self.konum + hareket

        # Alan dışına çıkmasın
        yeni_konum = np.clip(yeni_konum, 0, ALAN_BOYUTU)
        self.konum = yeni_konum

class HayvanatBahcesi:
    def __init__(self):
        self.hayvanlar = []
        self.hayvanlari_baslat()

    def hayvanlari_baslat(self):
        # Hayvanları verilen sayılara göre başlatma
        def tur_ekle(tur, adet, erkek_sayi, disi_sayi):
            for _ in range(erkek_sayi):
                self.hayvanlar.append(Hayvan(tur, 'E'))
            for _ in range(disi_sayi):
                self.hayvanlar.append(Hayvan(tur, 'D'))

        tur_ekle('koyun', 30, 15, 15)
        tur_ekle('inek', 10, 5, 5)
        tur_ekle('tavuk', 10, 0, 10)
        tur_ekle('horoz', 10, 10, 0)
        tur_ekle('kurt', 10, 5, 5)
        tur_ekle('aslan', 8, 4, 4)

        # Avcı, cinsiyet yok
        self.hayvanlar.append(Hayvan('avci'))

    def tur_konumlari(self, tur):
        return np.array([h.konum for h in self.hayvanlar if h.tur == tur])

    def tur_hayvanlari(self, tur):
        return [h for h in self.hayvanlar if h.tur == tur]

    def bir_adim_at(self):
        # 1. Tüm hayvanları hareket ettirme
        for h in self.hayvanlar:
            h.hareket_et()

        # 2. Avlanma
        self.avlanma()

        # 3. Üreme
        self.üreme()

    def avlanma(self):
        # Her türün konumlarını ve bireylerini ayrı ayrı toplama
        tur_konumlari = {}
        tur_bireyleri = {}
        for tur in set(h.tur for h in self.hayvanlar):
            bireyler = [h for h in self.hayvanlar if h.tur == tur]
            tur_konumlari[tur] = np.array([h.konum for h in bireyler])
            tur_bireyleri[tur] = bireyler

        # Avlananları işaretle
        silinecekler = set()

        for yirtici in ['kurt', 'aslan', 'avci']:
            yirticilar = tur_bireyleri.get(yirtici, [])
            if not yirticilar:
                continue

            yirtici_konumlari = np.array([y.konum for y in yirticilar])
            if len(yirtici_konumlari) == 0:
                continue

            hedefler = AV_HEDEFLERI[yirtici]
            for hedef_tur in hedefler:
                avlar = tur_bireyleri.get(hedef_tur, [])
                if not avlar:
                    continue

                av_konumlari = np.array([a.konum for a in avlar])
                if len(av_konumlari) == 0:
                    continue

                av_agaci = cKDTree(av_konumlari)

                if yirtici == 'kurt':
                    av_mesafesi = KURT_AV_MESAFESI
                elif yirtici == 'aslan':
                    av_mesafesi = ASLAN_AV_MESAFESI
                else:
                    av_mesafesi = AVCI_AV_MESAFESI

                for pos in yirtici_konumlari:
                    # Av mesafesindeki hayvanları bulma
                    indeksler = av_agaci.query_ball_point(pos, av_mesafesi)
                    for i in indeksler:
                        silinecekler.add(avlar[i])

        # Avlananları listeden çıkarma
        self.hayvanlar = [h for h in self.hayvanlar if h not in silinecekler]

    def üreme(self):
        # Üremeye uygun türler: cinsiyetli olanlar
        turler = set(h.tur for h in self.hayvanlar)
        for tur in turler:
            bireyler = [h for h in self.hayvanlar if h.tur == tur and h.cinsiyet in ('E', 'D')]
            if len(bireyler) < 2:
                continue

            konumlar = np.array([h.konum for h in bireyler])
            cinsiyetler = [h.cinsiyet for h in bireyler]
            agac = cKDTree(konumlar)

            yeni_bireyler = []
            for i, h in enumerate(bireyler):
                if h.cinsiyet == 'E':
                    indeksler = agac.query_ball_point(h.konum, UREME_MESAFESI)
                    yakin_disi = [j for j in indeksler if cinsiyetler[j] == 'D']
                    if yakin_disi:
                        yeni_cinsiyet = random.choice(['E', 'D'])
                        yeni = Hayvan(tur, yeni_cinsiyet)
                        yeni.konum = h.konum + np.random.uniform(-1, 1, 2)
                        yeni.konum = np.clip(yeni.konum, 0, ALAN_BOYUTU)
                        yeni_bireyler.append(yeni)

            self.hayvanlar.extend(yeni_bireyler)

    def sayim(self):
        sayac = {}
        for h in self.hayvanlar:
            sayac[h.tur] = sayac.get(h.tur, 0) + 1
        return sayac

def main():
    bahce = HayvanatBahcesi()
    for adim in range(ADIM_SAYISI):
        bahce.bir_adim_at()
        if adim % 100 == 0:
            print(f"{adim}. Adım: {bahce.sayim()}")

    son_sayim = bahce.sayim()
    print("\n1000 adım sonrası hayvan sayısı:")
    for tur, adet in son_sayim.items():
        print(f"{tur}: {adet}")

if __name__ == "__main__":
    main()